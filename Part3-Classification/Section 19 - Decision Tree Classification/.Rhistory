Y <- C(TRUE, 25)
P <- C(1:3)
P <- C(1, 2, 3)
C(1:3)
print(P)
print(C)
print(P)
P
P<-C(1, 2, 3)
Y<-C(1, 2, 3)
Y <- C(1, 2, 3)
P <- c(1:3)
plot(P)
String <- c("Learning R is fun 4 everyone and who doesn't want to learn it")
Q <- print(seq(25, 50, by = 0.5))
Q
print(seq(25, 50))
R <- print(seq(25, 50, length.out = 3, by = 0.5))
R <- print(seq(25, length.out = 3, by = 0.5))
R
Q <- print(seq(25, 50))
R <- print(seq(25, length.out = 3, by = 0.5))
str(iris)
install.packages("mboost")
install.packages("mboost")
str(bodyfat)
str(bodyfat)
Y <- c(TRUE, 25)
y<- c(25,TRUE)
y<-C(TRUE,25)
y<-c(TRUE,"25")
Y <- C(TRUE, 25)
Census <- read.csv("E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv")
View(Census)
str(Census)
x <- c(7, 5, 4, 1, 10, 0)
replace(x, x<7, 0)
x
R <- print(seq(Q[0], length.out = 3, by = 0.5))
R <- print(seq(Q[1], length.out = 3, by = 0.5))
R <- print(seq(Q[1], length.out = 3, by = 0.5))
Q <- print(seq(25, 50))
R <- print(seq(Q[1], length.out = 3, by = 0.5))
read.csv(E:\3rd Semester\Data Mining Tools & Techniques CSCI-5833\Assignments and Term Project\Homework 03 - Programming in R\Census.csv)
read.csv(E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv)
b <- read.csv(E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv)
b <- read.csv("E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv")
print(b)
b <- read.csv("C:\Users\prana\Desktop\BJsales.csv")
b <- read.csv("C:/Users/prana/Desktop/BJsales.csv")
print(b)
plurals <- read.csv("C:/Users/prana/Desktop/plurals.csv")
print(plurals)
print(d)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c("")
d <- list(a, b, c, 3)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c("")
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c()
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c("/0")
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(' ')
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(mode="numeric", length=0)
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- vector(mode="numeric", length=0)
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(seq(0, length.out = 0))
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(seq(length.out = 0))
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(seq(length.out = 0))
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(seq())
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(seq(""))
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(seq(NULL))
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(NULL)
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c(" /0")
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c("\0")
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- c("\0")
d <- list(a, b, c)
a <- c(2, 5, 3)
b <- c(21.3)
c <- vector("\0")
d <- list(a, b, c)
a <- c(2, 5, 3)
b <- c(21.3)
c <- character(length = 0)
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- NULL
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <- ""
d <- list(a, b, c)
print(d)
a <- c(2, 5, 3)
b <- c(21.3)
c <-
d <- list(a, b, c)
print(d)
c <- c()
a <- c(2, 5, 3)
b <- c(21.3)
c <- c()
d <- list(a, b, c)
print(d)
dim(L) <- c(5, 4)
K <- c("SWEN", "CS")
L <- rep(k, 10)
K <- c("SWEN", "CS")
L <- rep(K, 10)
dim(L) <- c(5, 4)
print(L)
K <- c("SWEN", "CS")
L <- rep(K, 10)
dim(L) <- c(4, 5)
print(L)
stopifnot(sort(I, decreasing = TRUE) == rev(sort(I)))
I <- c("Alpha")
stopifnot(sort(I, decreasing = TRUE) == rev(sort(I)))
I <- c("Alpha")
stopifnot(sort(I, decreasing = TRUE) == rev(sort(I)))
print(I)
ncol=2)
B <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=4, ncol=3)
t(B)
B <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=3, ncol=4)
B <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=3, ncol=4)
t(B)
method = c("Alpha", "Beta", "Charlie", "gamma"), index.return = FALSE)
sort.int(x, decreasing = TRUE,
sort.int(x, decreasing = TRUE, method = c("Alpha", "Beta", "Charlie", "gamma"), index.return = FALSE)
print(x)
Z <- c(order(-Alpha, -Beta, -Charlie, -gama))
Z <- c("Alpha", "Beta", "Charlie", "gama"))
Z <- c("Alpha", "Beta", "Charlie", "gama")
print(sort(Z), decreasing = TRUE)
print(sort(Z, decreasing = TRUE))
hist(P)
B <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=4, ncol=3)
dimnames(B) <- list(rownames(B, do.NULL = FALSE, prefix = "row"),
colnames(B, do.NULL = FALSE, prefix = "col"))
B
B <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=3, ncol=4)
C <- t(B)
dimnames(C) <- list(rownames(C, do.NULL = FALSE, prefix = "row"),
colnames(C, do.NULL = FALSE, prefix = "col"))
C
B <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=3, ncol=4)
C <- t(B)
dimnames(C) <- list(rownames(C, do.NULL = FALSE, prefix = "row"),
colnames(C, do.NULL = FALSE, prefix = "col"))
print(C)
str(Census)
library(rpart)
library(rpart.plot)
Census <- read.csv("E:\3rd Semester\Data Mining Tools & Techniques CSCI-5833\Assignments and Term Project\Homework 03 - Programming in R\Census.csv")
dataset <- Census
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
Census <- read.csv("E:\3rd Semester\Data Mining Tools & Techniques CSCI-5833\Assignments and Term Project\Homework 03 - Programming in R\Census.csv")
dataset <- Census
Census <- read.csv("E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv")
View(Census)
library(rpart)
library(rpart.plot)
Census <- read.csv("E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv")
dataset <- Census
str(dataset)
set.seed(4784)
tree2 <- rpart(own ~ age_husband <= 29, data = dataset)
rpart.plot(tree2)
library(rpart)
library(rpart.plot)
Census <- read.csv("E:/3rd Semester/Data Mining Tools & Techniques CSCI-5833/Assignments and Term Project/Homework 03 - Programming in R/Census.csv")
dataset <- Census
str(dataset)
tree2 <- rpart(own ~ age_husband <= 29, data = dataset)
rpart.plot(tree2)
print(Y)
str(L)
class(L)
C.matrix(1,3)
C.matrix(1:3)
C[1,3]
MatchingR
?MatchingR
?MatchingR()
clear
?matchingR
?matchingR()
install.packages("matchingR")
?matchingR
?matchingR()
print("Hello World!")
setwd("C:/Users/prana/Downloads/Udemy Machine Learning/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 19 - Decision Tree Classification")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Decision Tree Classification to the Training set
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
cm = table(test_set[, 3], y_pred)
plot(classifier)
text(classifier)
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
install.packages('randomForest')
install.packages("randomForest")
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
plot(classifier)
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3], main = 'Random Forest Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
